talk about how the state dict is initialized normally 

def reset_parameters(self):
        stdv = 1.0 / math.sqrt(self.state_size)
        for weight in self.parameters():
            weight.data.uniform_(-stdv, +stdv)
            
import numpy as np

img = np.array([[0, 0, 0],
                [0, 1, 2],
                [0, 2, 2]])

kernel = np.array([[1, -1,  1],
                   [0, -1,  0],
                   [0, -1, -1]])

out = np.zeros((3,3))

def shift(x):
    return x + 1

for i in range(-1, 1):  # valid range
    for j in range(-1, 1):  # valid range
        sum = 0
        for m in range(-1, 2):
            for n in range(-1, 2):
                x = img[shift(m), shift(n)] \
                    * kernel[shift(i - m), shift(j - n)]
                sum += x
                print('index i:', i, 'index j:', j,
                      'index m:', shift(m), 'index n:', shift(n))
                print(img[shift(m), shift(n)],
                      kernel[shift(i - m), shift(j - n)],
                      x)
        print('\t', 'out index i:', i, 'out index j:', j, 'sum:', sum)
        out[shift(i), shift(j)] = sum

print(out)




#------------

import numpy as np

img = np.array([[0, 0, 0],
                [0, 1, 2],
                [0, 2, 2]])

kernel = np.array([[1, -1,  1],
                   [0, -1,  0],
                   [0, -1, -1]])

out = np.zeros((3,3))

def shift(x):
    return x + 1

for i in range(-1, 1):  # valid range
    for j in range(-1, 1):  # valid range
        sum = 0
        for m in range(-1, 2):
            for n in range(-1, 2):
                x = img[shift(m), shift(n)] \
                    * kernel[shift(i + m), shift(j + n)]
                sum += x
                print('index i:', i, 'index j:', j,
                      'index m:', shift(m), 'index n:', shift(n))
                print(img[shift(m), shift(n)],
                      kernel[shift(i - m), shift(j - n)],
                      x)
        print('\t', 'out index i:', i, 'out index j:', j, 'sum:', sum)
        out[shift(i), shift(j)] = sum

print(out)



# latest
import numpy as np

img = np.array([[0, 0, 0],
                [0, 1, 2],
                [0, 2, 2]])
kernel = np.array([[1, -1,  1],
                   [0, -1,  0],
                   [0, -1, -1]])
out = np.zeros((3,3))

shift = lambda x: x+1

for i in range(-1, 1):  # valid range
    for j in range(-1, 1):  # valid range
        sum = 0
        for m in range(-1, 2):
            for n in range(-1, 2):
                sum += img[shift(i + m), shift(i + n)] * kernel[shift(m), shift(n)]
        out[shift(i), shift(j)] = sum
print(out)

